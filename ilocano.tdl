;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Ilocano
;;; created at:
;;;     Wed Apr 26 02:55:42 UTC 2017
;;; based on Matrix customization system version of:
;;;     Tue Apr 25 03:52:37 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case,
          LOCNOUN bool,
          NP-PRED-NOUN bool ].

head :+ [ AUX bool,
          INIT bool,
          FORM form ].

inflected :+ [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG luk,
    ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG luk,
    ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG luk ].

infl-satisfied :+ [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG na-or-+,
    ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG na-or-+,
    ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG na-or-+ ].

png :+ [ PERNUM pernum,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-comp-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < > ].

isect-mod-phrase :+ [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
;foc := case.  ; focus-case
obl := case.  ; obliq
cor+erg := case.
cor := cor+erg & cor+abs.
erg := cor+erg.
cor+abs := case.
abs := cor+abs.
ind-pron := case.

;;; Pernum

pernum := *top*.
sg := pernum.
non-sg := pernum.
pl := non-sg & pl+3rd & pl+1st & pl+2nd.
du := non-sg.
dist-pl := pl.
1sg := 1st & sg.
2sg := 2nd & sg.
3sg := 3rd & sg.
1du := 1st & du.
2du := 2nd & du.
3du := 3rd & du.
1dist-pl := 1st & dist-pl.
2dist-pl := 2nd & dist-pl.
3dist-pl := 3rd & dist-pl.
pl+3rd := pernum.
3rd := pl+3rd.
pl+1st := pernum.
1st := pl+1st.
pl+2nd := pernum.
2nd := pl+2nd.

;;; Gender

gender := *top*.
masculine := gender.
feminine := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Aspect

perfective := aspect.
imperfective := aspect.
past-imperfective := aspect.
infinitive := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

obl-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT - ] > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := obl-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD [ LOCNOUN - ],
                   CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

locative-noun-lex := basic-noun-lex & non-mod-lex-item & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM sg ] >,
                             COMPS < #comps & [ LOCAL.CAT [ HEAD noun & [ CASE cor ],
                                                            VAL.SPR < > ], 
                                                OPT - ] > ],
                       HEAD noun & [ CASE obl,
                                     LOCNOUN + ] ],
    ARG-ST < #comps > ].

pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX [ COG-ST activ-or-more,
                                     SPECI + ],
                   CAT.HEAD.LOCNOUN - ] ].

enc-pron-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.NP-PRED-NOUN - ].

erg-1sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM 1sg ] ].

erg-2sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

erg-3sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM 3sg ] ].

erg-3pl-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM pl+3rd ] ].

abs-1sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM 1sg ] ].

abs-2sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

abs-3pl-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM pl+3rd ] ].

abs-1pl-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM pl+1st ] ].

abs-2pl-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM pl+2nd ] ].

abs-du-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM du ] ].

erg-1pl-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM pl+1st ] ].

erg-du-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM du,
                   CAT.HEAD.CASE erg ] ].

erg-2pl-noun-lex := enc-pron-noun-lex.

ind-pron-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ NP-PRED-NOUN +,
                            CASE ind-pron ] ].

ind-1sg-noun-lex := ind-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

ind-1pl-noun-lex := ind-pron-noun-lex.

ind-du-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM du ].

ind-2sg-noun-lex := ind-pron-noun-lex.

ind-2pl-noun-lex := ind-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl+2nd ].

ind-3sg-noun-lex := ind-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

ind-3pl-noun-lex := ind-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl+3rd ].

redup-gem-noun-lex := obl-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl+3rd ].

obl-pron-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE obl,
                            NP-PRED-NOUN - ] ].

obl-1sg-noun-lex := obl-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

obl-2sg-noun-lex := obl-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ].

obl-3sg-noun-lex := obl-pron-noun-lex.

obl-1pl-noun-lex := obl-pron-noun-lex.

obl-2pl-noun-lex := obl-pron-noun-lex.

obl-du-noun-lex := obl-pron-noun-lex.

obl-3pl-noun-lex := pron-noun-lex.

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item & fossil-aspect-infix-or-fossil-aspect-prefix-rule-dtr & only-focus-prefix-or-only-focus-suffix-or-infx-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

trans-verb-lex := transitive-verb-lex &
  [ INFLECTED.ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG - ].

intrans-verb-lex := intransitive-verb-lex.

embedding-verb-lex := main-verb-lex & clausal-second-arg-trans-lex-item &
 [ SYNSEM.LOCAL.CAT.VAL [ COMPS < #comps & [ LOCAL.CAT.HEAD comp ] >,
                          SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg ],
   ARG-ST < [ ], #comps > ].

embedding-declarative-verb-lex := embedding-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.SF prop ] ].

embedding-interrogative-verb-lex := embedding-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.SF ques ] ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

;;; NP predicate (copula-less equational sentence)
n-bar-predicate-rule := unary-phrase & nocoord &
  [ SYNSEM [ LOCAL.CAT [ HEAD verb & [ MOD < > ],
                       VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < [ OPT -, LOCAL [ CONT.HOOK [ INDEX #arg1 ],
                                              CAT [ HEAD noun & [ NP-PRED-NOUN + ],
                                                    VAL.SPR < > ] ] ] > ] ] ],
    C-CONT [ HOOK [ LTOP #ltop,
                    INDEX #index,
                    XARG #arg1 ],
             RELS <! arg12-ev-relation &
                   [ PRED "_be_v_id_rel",
                     LBL #ltop,
                     ARG0 #index,
                     ARG1 #arg1,
                     ARG2 #arg2 ],
                   quant-relation &
                   [ PRED "exist_q_rel",
                     ARG0 #arg2,
                     RSTR #harg ] !>,
             HCONS <! qeq & [ HARG #harg, LARG #larg ] !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun & [ NP-PRED-NOUN + ],
                                  VAL [ SPR < > ] ],
                            CONT.HOOK [ INDEX #arg2,
                                        LTOP #larg ] ] ] > ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex & no-hcons-lex-item.

adj-adj-lex := stative-pred-adj-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ MOD < >,
                            PRD - ] ].

; Basic attributive adjective definition

; attr-adj-lex := adj-lex & intersective-mod-lex &
;   [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
;                                               VAL.SPR cons ] ] > ].

; Stative predicate adjective definition

stative-pred-adj-lex := adj-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                            CAT [ VAL [ SPR < >,
                                                        COMPS < > ],
                                                  HEAD noun & [ CASE cor ] ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

;;; Attributive Adjectives with ligature, intersecting between noun and adj, or adj and noun
attr-adj-mod-ligature-lex := basic-one-arg & intersective-mod-lex & raise-sem-lex-item &
  [ SYNSEM.LOCAL [ CAT [ HEAD adp & 
                           [ INIT #init,
                             MOD < [ LOCAL [ CAT [ HEAD noun,
                                                   VAL.SPR < [ ] > ],
                                             CONT.HOOK [ INDEX #index ] ] ] > ],
                         VAL [ SPR < >,
                               SUBJ < >,
                               SPEC < >,
                               COMPS < #comps & [ LOCAL [ CAT [ HEAD adj,
                                                                VAL.SUBJ < [ ] > ],
                                                          CONT.HOOK [ XARG #index ] ] ] > ],
                         POSTHEAD #init ] ],
    ARG-ST < #comps > ].

;;; Adverbs
adv-mod-ligature-lex := basic-one-arg & intersective-mod-lex & raise-sem-lex-item &
  [ SYNSEM.LOCAL [ CAT [ HEAD adp & 
                           [ MOD < [ LOCAL [ CAT [ HEAD verb,
                                                   VAL [ SUBJ < >,
                                                         COMPS < > ] ],
                                             CONT.HOOK [ INDEX #index ] ] ] > ],
                         VAL [ SPR < >,
                               SUBJ < >,
                               SPEC < >,
                               COMPS < #comps & [ LOCAL [ CAT [ HEAD adj,
                                                                VAL.SUBJ < [ ] > ],
                                                          CONT.HOOK [ INDEX #index ] ] ] > ],
                         POSTHEAD - ] ],
    ARG-ST < #comps > ].

adv-mod-iti-lex := basic-one-arg & intersective-mod-lex & raise-sem-lex-item &
  [ SYNSEM.LOCAL [ CAT [ HEAD adp & 
                           [ MOD < [ LOCAL.CAT [ HEAD verb,
                                                 VAL [ SUBJ < >,
                                                       COMPS < > ] ] ] > ],
                         VAL [ SPR < >,
                               SUBJ < >,
                               SPEC < >,
                               COMPS < [ LOCAL.CAT [ VAL.SUBJ < [ ] >,
                                                     HEAD adj ] ] > ],
                         POSTHEAD + ] ] ].

;;; Others

;;; PP locative predicate
locative-vp-phrase := unary-phrase & nocoord &
  [ SYNSEM [ LOCAL.CAT [ HEAD verb & [ MOD < > ],
                         VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < [ LOCAL [ CONT.HOOK [ INDEX #arg1 ],
                                                CAT [ HEAD noun & [ CASE cor,
                                                                    LOCNOUN - ],
                                                      VAL.SPR < > ] ] ] > ] ] ],
    C-CONT [ HOOK [ LTOP #ltop,
                    INDEX #index,
                    XARG #arg1 ],
             RELS <! arg12-ev-relation &
                   [ PRED "_loc_p_rel",
                     LBL #ltop,
                     ARG0 #index,
                     ARG1 #arg1,
                     ARG2 #arg2 ] !>,
             HCONS <! !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun & [ LOCNOUN + ],
                                  VAL [ SPR < > ] ],
                            CONT.HOOK [ INDEX #arg2 ] ] ] > ].


;;; Complementizers
complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM [ LOCAL [ CAT [ HEAD comp & [ MOD < > ],
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < #comp > ] ] ] ],
    ARG-ST < #comp &
             [ LOCAL [ CAT [ HEAD verb,
                             VAL [ SUBJ < >,
                                   COMPS < > ] ] ] ] > ].

complementizer-declarative-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop ].

complementizer-interrogative-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ],
                   CONT.HOOK.INDEX [ COG-ST type-id ] ] ].

core-sg-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE cor,
                                            CONT.HOOK.INDEX.PNG.PERNUM sg ] ].

core-pl-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE cor,
                                            CONT.HOOK.INDEX.PNG.PERNUM non-sg ] ].

obl-sg-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD [ CASE obl,
                                                       NP-PRED-NOUN - ],
                                            CONT.HOOK.INDEX.PNG.PERNUM sg ] ].

obl-pl-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD [ CASE obl,
                                                       NP-PRED-NOUN - ],
                                            CONT.HOOK.INDEX.PNG.PERNUM non-sg ] ].


;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules 
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

fossil-aspect-infix-or-fossil-aspect-prefix-rule-dtr := word-or-lexrule.
only-focus-prefix-or-only-focus-suffix-or-infx-rule-dtr := word-or-lexrule.

;;; Lexical rule types

only-focus-suffix-or-infx-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG +,
                ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix ],
    DTR only-focus-prefix-or-only-focus-suffix-or-infx-rule-dtr &
        [ INFLECTED.FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix ] ].

only-goal-focus-suffix-lex-lex-rule := only-focus-suffix-or-infx-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg,
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                         OPT + ] ] ].

only-actor-focus-infix-lex-lex-rule := only-focus-suffix-or-infx-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                        OPT + ],
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE obl,
                                         OPT-CS type-id,
                                         OPT + ] ] ].

only-aspect-prefix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ],
    DTR trans-verb-lex &
        [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                      ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ] ] ].

only-perf-aspect-prefix-lex-lex-rule := only-aspect-prefix-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg,
                             COMPS.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                           OPT + ] ],
                   CONT.HOOK.INDEX.E.ASPECT perfective ] ].

productive-focus-suffix-or-infix-lex-rule-super := add-only-no-ccont-rule & fossil-aspect-infix-or-fossil-aspect-prefix-rule-dtr & infl-lex-rule &
  [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG -,
                ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ],
    DTR trans-verb-lex &
        [ INFLECTED.ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ] ].

productive-actor-focus-infix-lex-lex-rule := productive-focus-suffix-or-infix-lex-rule-super &
  [ INFLECTED.FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG -,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                        OPT + ],
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE obl,
                                         OPT-CS type-id,
                                         OPT + ] ] ].

productive-goal-focus-suffix-lex-lex-rule := productive-focus-suffix-or-infix-lex-rule-super &
  [ INFLECTED.FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG -,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg,
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                         OPT + ] ] ].

fossil-aspect-prefix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG +,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx,
                ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG #only-aspect-infix-or-only-aspect-prefix-or-only-aspect-suffix-or-only-focus-prefix-or-only-focus-suffix-or-infx-or-productive-focus-prefix-or-productive-focus-suffix-or-infix-or-productive-imperf-aspect-redup ],
    DTR fossil-aspect-infix-or-fossil-aspect-prefix-rule-dtr &
        [ INFLECTED [ ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx,
                      ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG #only-aspect-infix-or-only-aspect-prefix-or-only-aspect-suffix-or-only-focus-prefix-or-only-focus-suffix-or-infx-or-productive-focus-prefix-or-productive-focus-suffix-or-infix-or-productive-imperf-aspect-redup ] ] ].

fossil-aspect-prefix-lex-lex-rule := fossil-aspect-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

only-focus-prefix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG +,
                ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix ],
    DTR only-focus-prefix-or-only-focus-suffix-or-infx-rule-dtr &
        [ INFLECTED.FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix ] ].

only-actor-focus-prefix-lex-lex-rule := only-focus-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                        OPT + ],
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE obl,
                                         OPT-CS type-id,
                                         OPT + ] ] ].

only-goal-focus-prefix-lex-lex-rule := only-focus-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg,
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                         OPT + ] ] ].

productive-focus-prefix-lex-rule-super := add-only-no-ccont-rule & fossil-aspect-infix-or-fossil-aspect-prefix-rule-dtr & infl-lex-rule &
  [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG -,
                ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ],
    DTR trans-verb-lex &
        [ INFLECTED.ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ] ].

productive-actor-focus-prefix-lex-rule := productive-focus-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                        OPT + ],
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE obl,
                                         OPT-CS type-id,
                                         OPT + ] ] ].

productive-goal-focus-prefix-lex-rule := productive-focus-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg,
                           COMPS.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                         OPT + ] ] ].

only-aspect-infix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ],
    DTR trans-verb-lex &
        [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                      ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ] ] ].

only-perf-aspect-infix-lex-lex-rule := only-aspect-infix-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT perfective,
                   CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg,
                             COMPS.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                           OPT + ] ] ] ].

fossil-aspect-infix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG +,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx,
                ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG #only-aspect-infix-or-only-aspect-prefix-or-only-aspect-suffix-or-only-focus-prefix-or-only-focus-suffix-or-infx-or-productive-focus-prefix-or-productive-focus-suffix-or-infix-or-productive-imperf-aspect-redup ],
    DTR fossil-aspect-infix-or-fossil-aspect-prefix-rule-dtr &
        [ INFLECTED [ ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx,
                      ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG #only-aspect-infix-or-only-aspect-prefix-or-only-aspect-suffix-or-only-focus-prefix-or-only-focus-suffix-or-infx-or-productive-focus-prefix-or-productive-focus-suffix-or-infix-or-productive-imperf-aspect-redup ] ] ].

fossil-perf-aspect-infix-lex-lex-rule := fossil-aspect-infix-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

only-aspect-suffix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ],
    DTR trans-verb-lex &
        [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                      ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ] ] ].

imperf-aspect-redup-lex-lex-rule := only-aspect-suffix-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT imperfective,
                   CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+erg,
                             COMPS.FIRST [ LOCAL.CAT.HEAD.CASE cor+abs,
                                           OPT + ] ] ] ].

productive-imperf-aspect-redup-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & only-focus-prefix-or-only-focus-suffix-or-infx-rule-dtr &
  [ INFLECTED [ ONLY-ASPECT-INFIX-OR-ONLY-ASPECT-PREFIX-OR-ONLY-ASPECT-SUFFIX-OR-ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-OR-PRODUCTIVE-FOCUS-PREFIX-OR-PRODUCTIVE-FOCUS-SUFFIX-OR-INFIX-OR-PRODUCTIVE-IMPERF-ASPECT-REDUP-FLAG +,
                FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ],
    DTR trans-verb-lex &
        [ INFLECTED [ FOSSIL-ASPECT-INFIX-OR-FOSSIL-ASPECT-PREFIX-FLAG #fossil-aspect-infix-or-fossil-aspect-prefix,
                      ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG #only-focus-prefix-or-only-focus-suffix-or-infx ] ] ].

productive-imperf-aspect-redup-lex-lex-rule := productive-imperf-aspect-redup-lex-rule-super &
  [ INFLECTED.ONLY-FOCUS-PREFIX-OR-ONLY-FOCUS-SUFFIX-OR-INFX-FLAG -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

context1-decl-head-opt-subj-phrase := decl-head-opt-subj-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE abs,
                                                     CONT.HOOK.INDEX.PNG.PERNUM 3sg ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD adp & [ INIT - ] ].

head-subj-phrase := decl-head-subj-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LIGHT + ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;;
;;; Possessive phrase: In all possessive constructions we've seen, the
;;; possessum (head) is initial, and the possessor is in second position.

;FIX ME: make two versions of poss, one for COG-ST of uniq+fam+act of and another for type-id
poss-phrase := head-initial &
  [ SYNSEM.LOCAL.CAT [ HEAD #head,
                       VAL [ SPR #hdspr,
                             COMPS < >,
                             SUBJ < > ] ],
    C-CONT [ HOOK.INDEX #index,
      RELS < ! arg12-ev-relation & [ PRED "poss_rel",
                                     LBL #lbl,
                                     ARG1 #index,
                                     ARG2 #poss ],
               quant-relation & [ PRED "exist_q_rel",
               ARG0 #index,
               RSTR #harg ] ! >,
      HCONS < ! qeq & [ HARG #harg, LARG #lbl ] ! >,
      ICONS < ! ! > ],
      HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD #head & noun & [ CASE cor ],
                              VAL.SPR #hdspr & < [ ] > ],
                              CONT.HOOK [ INDEX #index & [ COG-ST cog-st ],
                                          LTOP #lbl ] ],
      NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD noun & [ CASE cor+erg ],
                                        VAL.SPR < > ],
                                  CONT.HOOK.INDEX #poss ] ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

np2-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

s2-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

s2-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Feature Resolution Rules

non-sg-non-sg-any-pernum-coord-rule := coord-phrase &
  [ LCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-sg,
    RCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-sg ].

pass-up-png-coord-rule := bottom-coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG #png,
    NONCONJ-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG #png ].

;;; Coordination Strategy 5

n5-non-sg-non-sg-any-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule & non-sg-non-sg-any-pernum-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

n5-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase & pass-up-png-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;;;;
;;; Second-position enclitic support
;;;;;

canonical-synsem :+
    [ L-PERIPH bool ].

basic-binary-phrase :+
    [ SYNSEM.L-PERIPH #periph,
      ARGS < [ SYNSEM.L-PERIPH #periph ], [ SYNSEM.L-PERIPH - ] > ].

basic-head-mod-phrase-simple :+
    [ HEAD-DTR.SYNSEM.L-PERIPH #periph,
      NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < [ L-PERIPH #periph ] > ].

same-periph-unary-phrase := unary-phrase &
    [ SYNSEM.L-PERIPH #periph,
      ARGS < [ SYNSEM.L-PERIPH #periph ] > ].

bare-np-phrase :+
    [ SYNSEM.LIGHT - ].

question-clitic-lex := no-hcons-lex-item &
    [ SYNSEM.LOCAL [ CAT [ VAL [ SPR < >, COMPS < >, SUBJ < >, SPEC < >],
                                          HEAD adv & 
                                                [ MOD < [ LIGHT +,
                                                          LOCAL intersective-mod,
                                                          L-PERIPH + ] > ]],
                             CONT.RELS <! !> ]].

;;;;;;;;;;;;;;;;;;;;
;;; Wh-Questions ;;;
;;;;;;;;;;;;;;;;;;;;

; Adding this feature for now so grammar will load
non-local :+
  [ QUE 0-1-dlist ].

wh-pronoun-noun-lex := norm-hook-lex-item & basic-icons-lex-item & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ] ],
		     CONT [ HOOK.INDEX.PNG.PERNUM 3rd,
	                    RELS <! [ LBL #larg,
				      ARG0 #ind & ref-ind ],
				  [ PRED "wh_q_rel",
				    ARG0 #ind,
				    RSTR #harg ] !>,
			    HCONS <! [ HARG #harg,
				       LARG #larg ] !> ] ],
	     NON-LOCAL.QUE <! #ind !> ] ].

basic-head-filler-phrase :+
   [ ARGS < [ SYNSEM.LOCAL.COORD - ], [ SYNSEM.LOCAL.COORD - ] > ].

wh-ques-phrase := basic-head-filler-phrase & interrogative-clause & 
		  head-final &
   [ SYNSEM.LOCAL.CAT [ MC bool,
			VAL #val,
			HEAD verb & [ FORM finite ] ],
     HEAD-DTR.SYNSEM.LOCAL.CAT [ MC na,
				 VAL #val & [ SUBJ < >,
					      COMPS < > ] ],
     NON-HEAD-DTR.SYNSEM.NON-LOCAL.QUE <! ref-ind !> ].

extracted-comp-phrase := basic-extracted-comp-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ cons ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].
