;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Ilocano
;;; created at:
;;;     Sat Apr 15 06:32:12 UTC 2017
;;; based on Matrix customization system version of:
;;;     Fri Apr 14 14:46:14 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ AUX bool,
    FORM form ].

png :+ [ PERNUM pernum,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-comp-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
foc := case.  ; focus-case
obl := case.  ; obliq
cor+abs := case.
cor := cor+abs & cor+erg.
abs := cor+abs.
cor+erg := case.
erg := cor+erg.

;;; Pernum

pernum := *top*.
sg := pernum.
non-sg := pernum.
pl := non-sg & pl+3rd.
du := non-sg.
dist-pl := pl.
1st := pernum.
2nd := pernum.
1sg := 1st & sg.
2sg := 2nd & sg.
3sg := 3rd & sg.
1du := 1st & du.
2du := 2nd & du.
3du := 3rd & du.
1dist-pl := 1st & dist-pl.
2dist-pl := 2nd & dist-pl.
3dist-pl := 3rd & dist-pl.
pl+3rd := pernum.
3rd := pl+3rd.

;;; Gender

gender := *top*.
masculine := gender.
feminine := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Aspect

perfective := aspect.
imperfective := aspect.
past-imperfective := aspect.
infinitive := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

obl-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT - ] > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := obl-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

pron-noun-lex := no-spr-noun-lex.

enc-pron-noun-lex := pron-noun-lex.

erg-1sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM 1sg ] ].

erg-2sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

erg-3sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM 3sg ] ].

erg-3pl-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PERNUM pl+3rd ] ].

abs-1sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM 1sg ] ].

abs-2sg-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

abs-3pl-noun-lex := enc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PERNUM pl+3rd ] ].

;;; Verbs

verb-lex := non-mod-lex-item & aspect-prefix-rule-dtr & int-infix-rule-dtr &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

intrans-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+abs ].

trans-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CAT.HEAD.CASE cor+abs,
                           SUBJ.FIRST [ LOCAL.CAT.HEAD.CASE cor+erg,
                                        OPT - ] ] ].

no-obj-drop-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

obj-drop-verb-lex := transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

core-sg-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE cor,
                                            CONT.HOOK.INDEX.PNG.PERNUM sg ] ].

core-pl-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE cor,
                                            CONT.HOOK.INDEX.PNG.PERNUM pl ] ].

obl-sq-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE obl,
                                            CONT.HOOK.INDEX.PNG.PERNUM sg ] ].

obl-pl-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE obl,
                                            CONT.HOOK.INDEX.PNG.PERNUM pl ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

; Adjective Incorporation

adj_incorporation-lex-rule := add-only-rule &
  [ C-CONT [ RELS <! arg1-ev-relation &
                     [ LBL #ltop,
                       ARG1 #index ] !>,
             HOOK #hook ],
    DTR.SYNSEM.LOCAL [ CAT.HEAD noun,
                       CONT.HOOK #hook &
                                 [ LTOP #ltop,
                                   INDEX #index ] ] ].

;;; Intermediate rule types

int-infix-rule-dtr := word-or-lexrule.
aspect-prefix-rule-dtr := word-or-lexrule.

;;; Lexical rule types

aspect-prefix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR aspect-prefix-rule-dtr ].

perf-asp-infl-lex-rule := aspect-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

aspect-suffix-lex-rule-super := add-only-no-ccont-rule & aspect-prefix-rule-dtr & infl-lex-rule &
  [ DTR verb-lex ].

imperf-asp-redup-lex-rule := aspect-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

int-prefix-lex-rule-super := add-only-no-ccont-rule & aspect-prefix-rule-dtr & infl-lex-rule &
  [ DTR verb-lex ].

intrans-prefix-lex-rule := int-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+abs ].

int-infix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR int-infix-rule-dtr ].

intrans-infix-lex-rule := int-infix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE cor+abs ].

aspect-infix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & int-infix-rule-dtr &
  [ DTR verb-lex ].

perf-asp-infix-lex-rule := aspect-infix-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

trans-prefix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR transitive-verb-lex ].

trans-perf-infix-lex-rule := trans-prefix-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

context1-decl-head-opt-subj-phrase := decl-head-opt-subj-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE abs ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

head-subj-phrase := decl-head-subj-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LIGHT + ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
